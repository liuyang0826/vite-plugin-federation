import type { Context } from 'types'
import axios from 'axios'
import { extname, join } from 'node:path'
import { writeFileSync } from 'node:fs'
import { normalizePath } from './utils'
import type { ViteDevServer } from 'vite'

const fileHeader = `/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by federation
`

export default async function fetchDeclaration(
  context: Context,
  server: ViteDevServer
) {
  const res = await Promise.allSettled(
    context.remote.map(async ([module, { external }]) => {
      let url = external.replace(extname(external), '.d.json')
      if (!/https?:\/\//.test(url)) {
        const local = server.resolvedUrls?.local[0]
        if (!local) return { module: module, declarations: [] }
        if (url[0] === '.') url = url.slice(1)
        if (url[0] === '/') url = url.slice(1)
        url = local + url
      }
      return {
        module: module,
        declarations: (await axios.get(url).then((res) => res.data)) as {
          name: string
          code: string
        }[]
      }
    })
  )

  const codes = res
    .flatMap((item) => {
      if (item.status !== 'fulfilled') return ''
      const { module, declarations } = item.value
      return declarations.map(
        ({ name, code }) =>
          `declare module "${normalizePath(join(module, name))}" {\n\t${code
            .trim()
            .split('\n')
            .join('\n\t')}\n}`
      )
    })
    .filter(Boolean)

  if (codes.length) {
    writeFileSync(
      join(context.viteConfig!.root, context.dts),
      fileHeader + codes.join('\n'),
      'utf-8'
    )
  }
}

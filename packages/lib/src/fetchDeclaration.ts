import type { Context } from 'types'
import axios from 'axios'
import { extname, join } from 'node:path'
import { writeFileSync } from 'node:fs'
import { normalizePath } from './utils'

const fileHeader = `/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by federation
`

export default async function fetchDeclaration(context: Context) {
  const res = await Promise.allSettled(
    context.remote.map(async ([module, { external }]) => {
      return {
        module: module,
        declarations: (await axios
          .get(external[0].replace(extname(external[0]), '.d.json'))
          .then((res) => res.data)) as { name: string; code: string }[]
      }
    })
  )

  const code = res
    .flatMap((item) => {
      if (item.status !== 'fulfilled') return ''
      const { module, declarations } = item.value
      return declarations.map(
        ({ name, code }) =>
          `declare module "${normalizePath(join(module, name))}" {\n\t${code
            .split('\n')
            .join('\n\t')}\n}`
      )
    })
    .join('\n')

  writeFileSync(
    join(context.viteConfig!.root, context.dts),
    fileHeader + code,
    'utf-8'
  )
}
